import os, sys, random
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from qiskit import QuantumCircuit, ClassicalRegister
from simulator import QSimulator
from ibm_noise_models import NoiseModel, Instruction, instruction_to_ibm, Op

###### ACTIONS ######
H0 = [Instruction(0, Op.H, None, None)]
H1 = [Instruction(1, Op.H, None, None)]
CX01 = [Instruction(1, Op.CNOT, 0, None)]
CX10 = [Instruction(0, Op.CNOT, 1, None)]
P0 = [Instruction(0, Op.MEAS, None, None)]
P1 = [Instruction(1, Op.MEAS, None, None)]
RESET = [Instruction(0, Op.RESET, None, None), Instruction(0, Op.CH, 2, None), Instruction(2, Op.WRITE0, None, None), Instruction(3, Op.WRITE0, None, None)]
IS0 = [Instruction(2, Op.WRITE1, None, None)]
ISPlus = [Instruction(3, Op.WRITE1, None, None)]
DONTKNOW = [Instruction(2, Op.WRITE1, None, None), Instruction(3, Op.WRITE1, None, None)]
def my_algorithm(qc: QuantumCircuit, initial_state, noise_model: NoiseModel, seed=1):
	#### INITIALIZE SIMULATOR ######
	qs, cs = initial_state
	simulator = QSimulator(noise_model, seed)
	simulator.qmemory = qs
	simulator.meas_cache = cs
	current_state = 731

	while True:
		if current_state in {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97}:
			# target state reached
			break
		if current_state == 731:
			actions = ['CX01']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX01 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 694
				continue
			raise Exception('Invalid (classical) memory state at 731')
		if current_state == 694:
			actions = ['H1', 'H0']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == H1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 678
				continue
			if choosen_action == H0 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 676
				continue
			raise Exception('Invalid (classical) memory state at 694')
		if current_state == 678:
			actions = ['P1', 'CX01', 'CX10']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 731
				continue
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 622
				continue
			if choosen_action == CX01 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 656
				continue
			if choosen_action == CX10 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 653
				continue
			raise Exception('Invalid (classical) memory state at 678')
		if current_state == 676:
			actions = ['CX01', 'CX10']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX01 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 662
				continue
			if choosen_action == CX10 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 643
				continue
			raise Exception('Invalid (classical) memory state at 676')
		if current_state == 622:
			actions = ['RESET']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 2:
				current_state = 536
				continue
			raise Exception('Invalid (classical) memory state at 622')
		if current_state == 656:
			actions = ['P1']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 582
				continue
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 536
				continue
			raise Exception('Invalid (classical) memory state at 656')
		if current_state == 653:
			actions = ['H1', 'RESET']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == H1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 533
				continue
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 0:
				current_state = 546
				continue
			raise Exception('Invalid (classical) memory state at 653')
		if current_state == 662:
			actions = ['P1']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 582
				continue
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 459
				continue
			raise Exception('Invalid (classical) memory state at 662')
		if current_state == 643:
			actions = ['H1', 'RESET']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == H1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 530
				continue
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 0:
				current_state = 546
				continue
			raise Exception('Invalid (classical) memory state at 643')
		if current_state == 536:
			actions = ['CX10']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX10 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 459
				continue
			raise Exception('Invalid (classical) memory state at 536')
		if current_state == 582:
			actions = ['H0']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == H0 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 487
				continue
			raise Exception('Invalid (classical) memory state at 582')
		if current_state == 533:
			actions = ['RESET']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 0:
				current_state = 489
				continue
			raise Exception('Invalid (classical) memory state at 533')
		if current_state == 546:
			actions = ['H1']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == H1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 489
				continue
			raise Exception('Invalid (classical) memory state at 546')
		if current_state == 459:
			actions = ['CX01']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX01 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 409
				continue
			raise Exception('Invalid (classical) memory state at 459')
		if current_state == 530:
			actions = ['P1', 'RESET', 'P0']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 487
				continue
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 616
				continue
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 0:
				current_state = 489
				continue
			if choosen_action == P0 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 481
				continue
			if choosen_action == P0 and simulator.meas_cache.get_memory_val() == 1:
				current_state = 538
				continue
			raise Exception('Invalid (classical) memory state at 530')
		if current_state == 487:
			actions = ['CX01']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX01 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 358
				continue
			raise Exception('Invalid (classical) memory state at 487')
		if current_state == 489:
			actions = ['CX10']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX10 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 431
				continue
			raise Exception('Invalid (classical) memory state at 489')
		if current_state == 409:
			actions = ['RESET']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 2:
				current_state = 196
				continue
			raise Exception('Invalid (classical) memory state at 409')
		if current_state == 616:
			actions = ['RESET', 'H0']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 2:
				current_state = 536
				continue
			if choosen_action == H0 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 536
				continue
			raise Exception('Invalid (classical) memory state at 616')
		if current_state == 481:
			actions = ['CX10']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX10 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 358
				continue
			raise Exception('Invalid (classical) memory state at 481')
		if current_state == 538:
			actions = ['H1']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == H1 and simulator.meas_cache.get_memory_val() == 1:
				current_state = 440
				continue
			raise Exception('Invalid (classical) memory state at 538')
		if current_state == 358:
			actions = ['RESET']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 0:
				current_state = 218
				continue
			raise Exception('Invalid (classical) memory state at 358')
		if current_state == 431:
			actions = ['RESET', 'P0']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 0:
				current_state = 218
				continue
			if choosen_action == P0 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 233
				continue
			if choosen_action == P0 and simulator.meas_cache.get_memory_val() == 1:
				current_state = 669
				continue
			raise Exception('Invalid (classical) memory state at 431')
		if current_state == 196:
			actions = ['P1']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 192
				continue
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 158
				continue
			raise Exception('Invalid (classical) memory state at 196')
		if current_state == 440:
			actions = ['CX10']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX10 and simulator.meas_cache.get_memory_val() == 1:
				current_state = 400
				continue
			raise Exception('Invalid (classical) memory state at 440')
		if current_state == 218:
			actions = ['P1']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 192
				continue
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 158
				continue
			raise Exception('Invalid (classical) memory state at 218')
		if current_state == 233:
			actions = ['P1']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 192
				continue
			if choosen_action == P1 and simulator.meas_cache.get_memory_val() == 2:
				current_state = 150
				continue
			raise Exception('Invalid (classical) memory state at 233')
		if current_state == 669:
			actions = ['RESET']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 1:
				current_state = 574
				continue
			raise Exception('Invalid (classical) memory state at 669')
		if current_state == 192:
			actions = ['IS0']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == IS0 and simulator.meas_cache.get_memory_val() == 4:
				current_state = 13
				continue
			raise Exception('Invalid (classical) memory state at 192')
		if current_state == 400:
			actions = ['RESET']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == RESET and simulator.meas_cache.get_memory_val() == 1:
				current_state = 316
				continue
			raise Exception('Invalid (classical) memory state at 400')
		if current_state == 158:
			actions = ['ISPlus']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == ISPlus and simulator.meas_cache.get_memory_val() == 10:
				current_state = 6
				continue
			raise Exception('Invalid (classical) memory state at 158')
		if current_state == 574:
			actions = ['CX10']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX10 and simulator.meas_cache.get_memory_val() == 1:
				current_state = 486
				continue
			raise Exception('Invalid (classical) memory state at 574')
		if current_state == 316:
			actions = ['P0']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == P0 and simulator.meas_cache.get_memory_val() == 0:
				current_state = 233
				continue
			if choosen_action == P0 and simulator.meas_cache.get_memory_val() == 1:
				current_state = 115
				continue
			raise Exception('Invalid (classical) memory state at 316')
		if current_state == 150:
			actions = ['ISPlus']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == ISPlus and simulator.meas_cache.get_memory_val() == 10:
				current_state = 80
				continue
			raise Exception('Invalid (classical) memory state at 150')
		if current_state == 486:
			actions = ['CX01']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == CX01 and simulator.meas_cache.get_memory_val() == 1:
				current_state = 400
				continue
			raise Exception('Invalid (classical) memory state at 486')
		if current_state == 115:
			actions = ['ISPlus']
			choosen_action = random.choice(actions)
			simulator.apply_instructions(choosen_action)
			if choosen_action == ISPlus and simulator.meas_cache.get_memory_val() == 9:
				current_state = 19
				continue
			raise Exception('Invalid (classical) memory state at 115')
